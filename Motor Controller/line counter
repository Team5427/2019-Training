<?xml version="1.0" encoding="UTF-8"?>
-<project default="deploy" name="athena-project-build">
<property file="${user.home}/wpilib/java/${version}/ant/ni_image.properties"/>
<!-- Load Tasks -->
-<taskdef resource="net/sf/antcontrib/antlib.xml">
-<classpath>
<pathelement location="${wpilib.ant.dir}/ant-contrib.jar"/>
</classpath>
</taskdef>
<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${classloadertask.jar}"/>
<classloader classpath="${jsch.jar}" loader="system"/>
-<taskdef name="webdav" classname="com.github.sardine.ant.SardineTask">
-<classpath>
<pathelement location="${wpilib.ant.dir}/sardine-5.8-SNAPSHOT.jar"/>
<pathelement location="${wpilib.ant.dir}/httpclient-4.5.3.jar"/>
<pathelement location="${wpilib.ant.dir}/httpcore-4.4.6.jar"/>
<pathelement location="${wpilib.ant.dir}/commons-codec-1.10.jar"/>
<pathelement location="${wpilib.ant.dir}/commons-logging-1.2.jar"/>
</classpath>
</taskdef>
-<typedef resource="edu/wpi/first/ant/roboriotasks.xml">
-<classpath>
<pathelement location="${wpilib.ant.dir}/roborio-ant-tasks-1.1.jar"/>
<pathelement location="${wpilib.ant.dir}/httpclient-4.5.3.jar"/>
<pathelement location="${wpilib.ant.dir}/httpcore-4.4.6.jar"/>
<pathelement location="${wpilib.ant.dir}/commons-codec-1.10.jar"/>
<pathelement location="${wpilib.ant.dir}/commons-logging-1.2.jar"/>
</classpath>
</typedef>
-<target name="clean" description="Clean up all build and distribution artifacts.">
<delete dir="${build.dir}"/>
<delete dir="${dist.dir}"/>
</target>
<!-- Targets -->
-<target name="get-target-ip">
<property name="ant.enable.asserts" value="true"/>
<assert name="team-number" message="Team number not set. Go to Window->Preferences->WPILib Preferences to set it." exists="true"/>
<echo message="Finding roboRIO..."/>
<var name="target" unset="true"/>
<find-roborio imageProperty="roboRIOImage" imageYearProperty="roboRIOImageYear" targetProperty="target" password="${adminPassword}" username="${adminUsername}" team="${team-number}"/>
-<if>
<isset property="target"/>
-<then>
<echo message="roboRIO found at ${target}, image FRC_roboRIO_${roboRIOImageYear}_v${roboRIOImage}"/>
</then>
-<else>
<assert name="roboRIOFound" message="roboRIO not found, please check that the roboRIO is connected, imaged and that the team number is set properly in Eclipse"/>
</else>
</if>
</target>
-<target name="compile" description="Compile the source code.">
<mkdir dir="${build.dir}"/>
-<path id="classpath.path">
<fileset dir="${userLibs.dir}" excludes="*-sources.jar,*-javadoc.jar" includes="*.jar"/>
<fileset file="${wpilib.jar}"/>
<fileset file="${ntcore.jar}"/>
<fileset file="${opencv.jar}"/>
<fileset file="${cscore.jar}"/>
<fileset file="${wpiutil.jar}"/>
<fileset dir="${userLibs}" erroronmissingdir="false"/>
</path>
<pathconvert property="classpathProp" refid="classpath.path"/>
<echo message="[athena-compile] Compiling ${src.dir} with classpath=${classpathProp} to ${build.dir}"/>

<javac debug="true" compiler="javac${ant.java.version}" source="${ant.java.version}" target="${ant.java.version}" classpathref="classpath.path" includeJavaRuntime="no" includeAntRuntime="no" destdir="${build.dir}" srcdir="${src.dir}"/>

</target>


-<target name="jar" depends="compile">

<echo message="[athena-jar] Making jar ${dist.jar}."/>

<mkdir dir="${dist.dir}"/>

<mkdir dir="${build.jars}"/>

<echo message="[athena-jar] Copying jars to ${build.jars}."/>


-<copy flatten="true" todir="${build.jars}">

<path refid="classpath.path"/>

</copy>


-<jar update="false" destfile="${dist.jar}">


-<manifest>

<attribute name="Main-Class" value="edu.wpi.first.wpilibj.RobotBase"/>

<attribute name="Robot-Class" value="${robot.class}"/>

<attribute name="Class-Path" value="."/>

</manifest>

<fileset dir="${build.dir}" includes="**/*.class"/>

<fileset dir="${src.dir}"/>

<zipgroupfileset dir="${build.jars}"/>

</jar>

</target>

<!-- We're running a clean here to get around a known ant issue where it does not detected changed constant variables.To get around this, we're recompiling the entire project, which is not an issue for most teams. If this is an issuefor you, you can remove the clean here, just be sure to do a full rebuild after you've changed any constants.Reference: http://stackoverflow.com/questions/6430001/ant-doesnt-recompile-constants -->



-<target name="deploy" description="Deploy the jar and start the program running." depends="clean,jar,get-target-ip,dependencies">


-<deploy-libs libs.deployDir="${libDeploy.dir}" libs.basedir="${wpilib.native.lib}" libs.name="WPI_Native_Libraries">


-<libs.local>


-<fileset dir="${wpilib.native.lib}" id="wpiNativeLibs.local">

<include name="libwpiHal.so"/>

<include name="libntcore.so"/>

<include name="libwpiutil.so"/>

<include name="libopencv*.so.3.2"/>

<include name="libcscore.so"/>

<include name="libopencv_java320.so"/>

<include name="libwpilibJNI.so"/>

</fileset>

</libs.local>

</deploy-libs>


-<deploy-libs libs.deployDir="${libDeploy.dir}" libs.basedir="${userLibs.dir}" libs.name="User_Libraries">


-<libs.local>


-<fileset dir="${userLibs.dir}">

<include name="*.so"/>

</fileset>

</libs.local>

</deploy-libs>

<echo message="[athena-deploy] Copying code over."/>


-<webdav password="${adminPassword}" username="${adminUsername}">

<delete url="http://${target}/files${deploy.dir}/${jar}"/>


-<put url="http://${target}/files${deploy.dir}/">

<fileset file="${dist.jar}"/>

</put>

<delete url="http://${target}/files${command.dir}robotCommand"/>


-<put url="http://${target}/files${command.dir}">

<fileset file="${wpilib.ant.dir}/robotCommand"/>

</put>

</webdav>

<echo message="[athena-deploy] Starting program."/>

<sshexec password="${password}" username="${username}" command="${deploy.kill.command}; sync" failonerror="false" trust="true" host="${target}"/>

</target>


-<target name="debug-deploy" description="Deploy the jar and start the program running." depends="clean,jar,get-target-ip,dependencies">


-<deploy-libs libs.deployDir="${libDeploy.dir}" libs.basedir="${wpilib.native.lib}" libs.name="WPI_Native_Libraries">


-<libs.local>


-<fileset dir="${wpilib.native.lib}" id="wpiNativeLibs.local">

<include name="libwpiHal.so"/>

<include name="libntcore.so"/>

<include name="libwpiutil.so"/>

<include name="libopencv*.so.3.2"/>

<include name="libcscore.so"/>

<include name="libopencv_java320.so"/>

<include name="libwpilibJNI.so"/>

</fileset>

</libs.local>

</deploy-libs>


-<deploy-libs libs.deployDir="${libDeploy.dir}" libs.basedir="${userLibs.dir}" libs.name="User_Libraries">


-<libs.local>


-<fileset dir="${userLibs.dir}">

<include name="*.so"/>

</fileset>

</libs.local>

</deploy-libs>

<echo message="[athena-deploy] Copying code over."/>


-<webdav password="${adminPassword}" username="${adminUsername}">

<delete url="http://${target}/files${deploy.dir}/${jar}"/>


-<put url="http://${target}/files${deploy.dir}/">

<fileset file="${dist.jar}"/>

</put>

<!-- The remoteDebugCommand file is used by /usr/local/frc/bin/frcRunRobot.sh on the roboRIO -->


<delete url="http://${target}/files${command.dir}/robotDebugCommand"/>


-<put url="http://${target}/files${command.dir}/">

<fileset file="${wpilib.ant.dir}/robotDebugCommand"/>

</put>

<!-- The frcdebug file is used as a flag for /usr/local/frc/bin/frcRunRobot.sh to run the robot program in debug mode -->


<delete url="http://${target}/files${debug.flag.dir}/frcdebug"/>


-<put url="http://${target}/files${debug.flag.dir}/">

<fileset file="${wpilib.ant.dir}/frcdebug"/>

</put>

</webdav>

<sshexec password="${adminPassword}" username="${adminUsername}" command="${debug.flag.command}" trust="true" host="${target}"/>

<echo message="[athena-deploy] Starting Debug program."/>

<sshexec password="${password}" username="${username}" command="${deploy.kill.command}" failonerror="false" trust="true" host="${target}"/>

</target>

<!-- Simulate -->



-<target name="jar-for-simulation" depends="compile">

<echo message="[jar-for-simulation] Building jar."/>


-<jar destfile="${simulation.dist.jar}">


-<manifest>

<attribute name="Built-By" value="${user.name}"/>

<attribute name="Robot-Class" value="${robot.class}"/>

<attribute name="Main-Class" value="edu.wpi.first.wpilibj.RobotBase"/>

</manifest>

<fileset dir="${build.dir}"/>


-<zipgroupfileset dir="${wpilib.sim.lib}">

<include name="**/*.jar"/>

</zipgroupfileset>

</jar>

</target>


-<target name="simulate" depends="jar-for-simulation">


-<sequential>

<echo message="[simulate] You may now run Gazebo and your DriverStation"/>

<echo message="[simulate] Running Code."/>


-<java fork="true" jar="${simulation.dist.jar}">

<jvmarg value="-Djava.library.path=${wpilib.sim.lib}"/>

</java>

</sequential>

</target>


-<target name="debug-simulate" depends="jar-for-simulation">


-<sequential>

<echo message="[simulate] You may now run Gazebo and your DriverStation"/>

<echo message="[simulate] Running Code In Debug Mode."/>


-<java fork="true" jar="${simulation.dist.jar}">

<jvmarg value="-Xdebug"/>

<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8348"/>

<jvmarg value="-Djava.library.path=${wpilib.sim.lib}"/>

</java>

</sequential>

</target>


-<target name="dependencies" depends="get-target-ip">

<property name="ant.enable.asserts" value="true"/>


-<assert message="Image of roboRIO does not match plugin. ${line.separator}Allowed image year: ${roboRIOAllowedYear} version: ${roboRIOAllowedImages}. ${line.separator}Actual image year: ${roboRIOImageYear} version: ${roboRIOImage}. ${line.separator}RoboRIO needs to be re-imaged or plugins updated.">


-<bool>


-<and>

<contains substring="${roboRIOImage}" string="${roboRIOAllowedImages}"/>

<contains substring="${roboRIOImageYear}" string="${roboRIOAllowedYear}"/>

</and>

</bool>

</assert>

<echo message="roboRIO image version validated"/>


-<webdav password="${adminPassword}" username="${adminUsername}">

<exists property="jreExists" url="http://${target}/files${roboRIOJRE.dir}/bin/java"/>

</webdav>


-<if>


-<not>

<equals arg2="true" arg1="${jreExists}"/>

</not>


-<then>

<echo message="Installing Azul Zulu JRE, this may take a couple of minutes..."/>


-<webdav password="${adminPassword}" username="${adminUsername}">

<delete url="http://${target}/files/tmp/${roboRIOJRE.ipk}"/>


-<put url="http://${target}/files/tmp/">

<fileset file="${wpilib.ant.dir}/${roboRIOJRE.ipk}"/>

</put>

</webdav>

<!-- the sed command is a workaround for an issue in the 2018_v4 image -->


<sshexec password="${adminPassword}" username="${adminUsername}" command="sed -i -e 's/^StartupDLLs/;StartupDLLs/' /etc/natinst/share/ni-rt.ini; opkg remove zulu-jre\*; opkg install /tmp/${roboRIOJRE.ipk}; rm /tmp/${roboRIOJRE.ipk}" trust="true" host="${target}"/>

</then>


-<else>

<echo message="JRE installation validated"/>

</else>

</if>

</target>

<!-- libs.name should not contain spaces as it is used to name a file -->



-<macrodef name="deploy-libs">

<attribute name="libs.name"/>

<attribute name="libs.basedir"/>

<attribute name="libs.deployDir"/>

<element name="libs.local"/>


-<sequential>

<local name="libs.local.notEmpty"/>

<local name="libs.local.checksum"/>

<local name="libs.deployed.checksum"/>

<local name="libs.local.modified.property"/>

<local name="libs.remote.modified.property"/>


-<trycatch>


-<try>


-<webdav password="${adminPassword}" username="${adminUsername}">

<get file="@{libs.basedir}/@{libs.name}.properties" url="http://${target}/files@{libs.deployDir}/@{libs.name}.properties" overwrite="true"/>

</webdav>

</try>


-<catch>

<delete file="@{libs.basedir}/@{libs.name}.properties" failonerror="false"/>

</catch>

</trycatch>


-<restrict id="libs.local.modified">

<libs.local/>


-<modified update="true" comparator="equal" algorithm="digest" cache="propertyfile" seldirs="true">

<param name="cache.cachefile" value="@{libs.basedir}/@{libs.name}.properties"/>

<param name="algorithm.algorithm" value="MD5"/>

</modified>

</restrict>


-<pathconvert property="libs.local.modified.property" refid="libs.local.modified" setonempty="false" pathsep=",">

<globmapper handledirsep="true" to="*" from="@{libs.basedir}/*"/>

</pathconvert>


-<if>

<isset property="libs.local.modified.property"/>


-<then>

<echo message="Deploying libraries ${line.separator} ${libs.local.modified.property}"/>


-<webdav password="${adminPassword}" username="${adminUsername}">


-<put url="http://${target}/files/tmp/">

<fileset dir="@{libs.basedir}" includes="${libs.local.modified.property}"/>

<fileset file="@{libs.basedir}/@{libs.name}.properties"/>

</put>

</webdav>


-<pathconvert property="libs.remote.modified.property" refid="libs.local.modified" setonempty="true" pathsep=" ">

<globmapper handledirsep="true" to="/tmp/*" from="@{libs.basedir}/*"/>

</pathconvert>

<sshexec password="${adminPassword}" username="${adminUsername}" command="chmod +x ${libs.remote.modified.property} && mv ${libs.remote.modified.property} /tmp/@{libs.name}.properties @{libs.deployDir} && ldconfig" trust="true" host="${target}"/>

</then>

</if>

</sequential>

</macrodef>

</project>